---
- name: deduce goss curent version
  shell: if [ -x {{ goss_binary["binary_location"] }} ];then {{ goss_binary["binary_location"] }} -v|grep 'goss version'|awk '{print $NF}'|sed 's/v//';fi
  register: goss_version_current

- name: create goss bin dir
  file: path="{{ goss_binary['binary_location'] | dirname }}"
        state=directory
        recurse=yes

- name: download goss binary
  get_url: url="{{ goss_binary['download_url'] }}"
           dest="{{ goss_binary['binary_location'] }}"
           mode='0755'
           validate_certs=no
  when: goss_version != goss_version_current.stdout

- name: create goss config dir
  file: path="{{ goss_binary['config_location'] }}"
        state=directory
        recurse=yes

- name: create additional goss config dir
  file: path="{{ goss_binary['configad_location'] }}"
        state=directory
        recurse=yes

- name: render goss import config
  template: src="goss.yaml.j2"
            dest="{{ goss_binary['config_location'] }}/goss.yaml"
  notify:
    - restart goss service

- name: render goss base test
  template: src="goss_base.yaml.j2"
            dest="{{ goss_binary['config_location'] }}/goss_base.yaml"
  notify:
    - restart goss service

- name: render bare min goss additional test
  template: src="goss_adtnl.yaml.j2"
            dest="{{ goss_binary['configad_location'] }}/goss_adtnl.yaml"
  notify:
    - restart goss service

- name: render goss server script
  template: src="gosserver.sh.j2"
            dest="{{ goss_binary['binary_location'] | dirname }}/gosserver"
            mode='0755'
  notify:
    - restart goss service

- name: render goss systemd service config
  template: src=goss.service.j2
            dest={{ goss_binary["goss_srvcnfig"] }}
  notify:
    - reload services
    - restart goss service

- name: start and enable goss service
  service: name=goss
           state=started
           enabled=true

- name: render goss monit config
  template: src="goss.j2"
            dest="{{ monit_properties["monit_configad"] }}/goss"
  notify:
    - reload monit configs
    - restart goss service

- include: cassandra.yml
  when: ansible_hostname | regex_search("^cassandra")

- include: elasticsearch.yml
  when: ansible_hostname | regex_search("^elasticsearch")

- include: kafka.yml
  when: ansible_hostname | regex_search("^kafka")

- include: spark.yml
  when: ansible_hostname | regex_search("^spark")
